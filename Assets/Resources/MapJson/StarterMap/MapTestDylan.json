{
  "type": "default",
  "code": "val totalGem = 7\nvar collected = 0\nval p = Player()\nfun Player.turnRight() {\n    p.turnLeft()\n    p.turnLeft()\n    p.turnLeft()\n}\n\nwhile (collected < totalGem) {\n    if (p.isOnGem) {\n        print(\"Collected gem!\")\n        p.collectGem()\n        collected += 1\n    }\n    if (p.isOnClosedSwitch) {\n        print(\"Toggled switch!\")\n        p.toggleSwitch()\n    }\n    if (!p.isBlockedRight) {\n        p.turnRight()\n        p.moveForward()\n    } else {\n        if (p.isBlocked) {\n            while (p.isBlocked) {\n                p.turnLeft()\n            }\n        }\n        p.moveForward()\n    }\n}",
  "grid": [
    [{"block": "OPEN", "level": 1, "biome": "PLAINS"},
      {"block": "OPEN", "level": 1, "biome": "PLAINS"},
      {"block": "BLOCKED", "level": 1, "biome": "PLAINS"}
    ],

    [{"block": "BLOCKED", "level": 1, "biome": "PLAINS"},
      {"block": "OPEN", "level": 1, "biome": "PLAINS"},
      {"block": "OPEN", "level": 1, "biome": "PLAINS"}],

    [{"block": "OPEN", "level": 1, "biome": "PLAINS"},
      {"block": "OPEN", "level": 1, "biome": "PLAINS"},
      {"block": "BLOCKED", "level": 1, "biome": "PLAINS"}],

    [{"block": "BLOCKED", "level": 1, "biome": "PLAINS"},
      {"block": "OPEN", "level": 1, "biome": "PLAINS"},
      {"block": "OPEN", "level": 1, "biome": "PLAINS"}],

    [{"block": "BLOCKED", "level": 1, "biome": "PLAINS"},
      {"block": "OPEN", "level": 1, "biome": "PLAINS"},
      {"block": "BLOCKED", "level": 1, "biome": "PLAINS"}]
  ],
  "gems": [
  ],
  "beepers": [],
  "switches": [],
  "platforms": [],
  "portals": [],
  "locks": [],
  "stairs": [],
  "players": [{
    "id": 1, "x": 0, "y": 0, "dir": "RIGHT", "role": "PLAYER", "stamina": 500
  }]
}
/*{
  "type": "mountainous",
  "code": "cst totalGem = 0\nvar collected = 0\n\nfunc turnRight() {\n turnLeft()\n turnLeft()\n turnLeft()\n}\n\nwhile collected < totalGem {\n if isOnGem {\n print(\"Collected gem!\")\n collectGem()\n collected += 1\n }\n if isOnClosedSwitch {\n print(\"Toggled switch!\")\n toggleSwitch()\n }\n if !isMOUNTAINRight {\n turnRight()\n moveForward()\n } else {\n if isMOUNTAIN {\n while isMOUNTAIN {\n turnLeft()\n }\n }\n moveForward()\n }\n}\n\n",
  "players": [{
    "id": 1, "x": 0, "y": 5, "dir": "RIGHT", "role": "PLAYER", "stamina": 500
  }],
  "portals": [],
  "locks": [],
  "grid": [
    [ "TREE", "TREE", "TREE", "BLOCKED", "BLOCKED", "BLOCKED", "BLOCKED", "BLOCKED", "BLOCKED" , "BLOCKED"],
    [ "TREE", "TREE", "TREE", "BLOCKED", "TREE", "BLOCKED", "TREE", "TREE", "BLOCKED" , "TREE"],
    [ "BLOCKED", "BLOCKED", "BLOCKED", "BLOCKED", "MOUNTAIN", "MOUNTAIN", "BLOCKED", "BLOCKED", "BLOCKED" , "TREE"],
    [ "BLOCKED", "TREE", "TREE", "BLOCKED", "BLOCKED", "BLOCKED", "TREE", "TREE", "BLOCKED" , "TREE"],
    [ "BLOCKED", "BLOCKED", "TREE", "TREE", "BLOCKED", "BLOCKED", "TREE", "TREE", "BLOCKED" , "TREE"],
    [ "BLOCKED", "BLOCKED", "MOUNTAIN", "TREE", "BLOCKED", "BLOCKED", "TREE", "TREE", "BLOCKED" , "BLOCKED"],
    [ "BLOCKED", "BLOCKED", "BLOCKED", "TREE", "BLOCKED", "BLOCKED", "TREE", "TREE", "BLOCKED" , "BLOCKED"],
    [ "TREE", "BLOCKED", "TREE", "TREE", "BLOCKED", "BLOCKED", "TREE", "TREE", "BLOCKED" , "BLOCKED"],
    [ "TREE", "BLOCKED", "TREE", "BLOCKED", "BLOCKED", "BLOCKED", "TREE", "TREE", "MOUNTAIN" , "BLOCKED"],
    [ "TREE", "BLOCKED", "BLOCKED", "BLOCKED", "BLOCKED", "BLOCKED", "BLOCKED", "BLOCKED", "BLOCKED" , "HOME"]
  ],
  "layout": [
    [ "NONE", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE" , "NONE" ],
    [ "NONE", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE" , "NONE" ],
    [ "NONE", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE" , "NONE" ],
    [ "NONE", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE" , "NONE" ],
   [ "NONE", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE" , "NONE" ],
    [ "NONE", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE" , "NONE" ],
    [ "NONE", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE" , "NONE" ],
    [ "NONE", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE" , "NONE" ],
    [ "NONE", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE" , "NONE" ],
    [ "NONE", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE", "NONE" , "NONE" ]
  ],
  "colors": [],
  "levels": [
    [1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,1,1,1]
  ],
  "stairs": []
}
*/